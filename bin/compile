#!/usr/bin/env bash

APP_DIR=/app
BUILD_DIR=$1
CACHE_DIR=$2
DANGER_DIR=foo
ENV_DIR=$3

export BUILD_DIR CACHE_DIR ENV_DIR
env
exit 1

BUILDPACK_URLS=$(<.buildpacks)

set -eo pipefail
shopt -s extglob dotglob nocasematch

main() {
    declare bpu bp branch detected released
    declare bp_dir build_dir cache_dir pristine_dir
    declare bp_released

    announce "Juggling pristine sources"
    juggle-into $BUILD_DIR ${pristine_dir:=$BUILD_DIR/pristine}

    for bpu in $BUILDPACK_URLS; do
        set-vars

        announce "Cloning $bpu"
        git clone --depth=1 $bpu $bp_dir 2>&1 | indent
        if [[ -n $branch ]]; then
            announce "Checking out branch $branch"
            (cd $bp_dir && git checkout $branch 2>&1 | indent)
        fi
        rm -rf $bp_dir/.git
    done

    for bpu in $BUILDPACK_URLS; do
        set-vars

        announce "Copying pristine sources for $bp"
        cp -al $pristine_dir $build_dir

        announce "Running $bp/bin/detect"
        detected=$($bp_dir/bin/detect $build_dir)
        if [[ $? != 0 || -z $detected ]]; then
            announce "... NO${detected:+: $detected}"
            continue
        fi
        announce "... YES: $detected"

        announce "Running $bp/bin/compile"
        kill-dir $APP_DIR
        mkdir -p $cache_dir
        $bp_dir/bin/compile $build_dir $cache_dir $ENV_DIR

        announce "Running $bp/bin/release"
        if [[ -x $bp_dir/bin/release ]]; then
            released=$($bp_dir/bin/release $build_dir)
            if [[ -n $released ]]; then
                echo "$released" > $BUILD_DIR/last_pack_release.out
                bp_released=$bp
            fi
        fi

        if ls $APP_DIR/* &>/dev/null; then
            announce "Preserving content of $APP_DIR"
            kill-dir $build_dir
            copy-dir $APP_DIR $build_dir
        fi
    done

    announce "Cleaning $APP_DIR"
    kill-dir $APP_DIR

    for bpu in $BUILDPACK_URLS; do
        set-vars

        announce "Installing $bp"
        copy-dir $build_dir $APP_DIR keep
    done

    if [[ -n $bp_released ]]; then
        announce "Using release configuration from $bp_released"
        cat $BUILD_DIR/last_pack_release.out | indent
    fi
}

set-vars() {
    if [[ $bpu == *'#'* ]]; then
        branch=${bpu##*#}
        bpu=${bpu%#*}
    else
        branch=
    fi
    bp=${bpu#*//*/}
    bp_dir=$BUILD_DIR/$bp/buildpack
    build_dir=$BUILD_DIR/$bp/build
    cache_dir=$CACHE_DIR/$bp
}

juggle-into() {
    declare tmp
    tmp=$(mktemp -d $2.XXXXXX)
    mv $1/!(${tmp##*/}) $tmp
    mv $tmp $2
}

copy-dir() {
    [[ $3 == keep ]] || kill-dir $2
    mkdir -p $2
    [[ ! -d $1 ]] || cp -a $1/. $2 || exit
}

kill-dir() {
    rm -rf $1 2>/dev/null || rm -rf $1/* $1/.[!.]*
}

announce() {
    echo "=====> $*" >&2
}

indent() {
    sed 's/^/       /'
}

if [ $(uname) == Darwin ]; then
    sed() { command sed -l "$@"; }
else
    sed() { command sed -u "$@"; }
fi

[[ ${0##*/} != compile ]] || main "$@"
